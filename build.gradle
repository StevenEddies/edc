allprojects {
	apply plugin: 'uk.me.eddies.apps.edc.gradleconvention.formatter'
	apply plugin: 'uk.me.eddies.apps.edc.gradleconvention.versioning'
}

project(':edc-backend') {

	apply plugin: 'uk.me.eddies.apps.edc.gradleconvention.java-app'

	dependencies {
		implementation 'io.dropwizard:dropwizard-core:2.0.28'
		implementation 'io.dropwizard:dropwizard-auth:2.0.28'
		implementation 'at.favre.lib:bcrypt:0.9.0'
		testImplementation 'io.dropwizard:dropwizard-testing:2.0.28'
		testImplementation 'io.dropwizard:dropwizard-client:2.0.28'
	}

	application {
		mainClass = 'uk.me.eddies.apps.edc.backend.application.EdcBackendApplication'
	}
	
	run {
		args 'server'
		args project.findProperty('configFile') ?: file('src/test/resources/uk/me/eddies/apps/edc/backend/application/testconfig.yaml')
	}
}

project(':edc-config-util') {

	apply plugin: 'uk.me.eddies.apps.edc.gradleconvention.java-app'

	dependencies {
		implementation 'at.favre.lib:bcrypt:0.9.0'
	}

	application {
		mainClass = 'uk.me.eddies.apps.edc.configutil.application.EdcConfigUtil'
	}
}

project('edc-frontend') {

	apply plugin: 'uk.me.eddies.apps.edc.gradleconvention.angular-app'
}

project('edc-deploy') {

	apply plugin: 'base'
	apply plugin: 'com.palantir.docker-compose'
	
	dependencies {
		docker project(path: ':edc-backend', configuration: 'docker')
		docker project(path: ':edc-frontend', configuration: 'docker')
	}
	
	generateDockerCompose {
		mustRunAfter clean
	}
	
	tasks.register('processResources', Copy) {
		group = 'dist'
		description = 'Copies resources to the dist directory.'
		from 'src/main/resources'
		into 'build/dist/edc'
		mustRunAfter clean
	}
	
	dockerCompose {
		template 'src/main/docker/docker-compose.yaml.template'
		dockerComposeFile 'build/dist/edc/docker-compose.yaml'
	}
	
	tasks.register('assembleDist') {
		group = 'dist'
		description = 'Assembles the project.'
		dependsOn generateDockerCompose, processResources
	}
	
	tasks.register('packageDist', Zip) {
		group = 'dist'
		description = 'Creates a zip package of the project.'
		dependsOn assembleDist
		archiveFileName = "edc-${project.version}.zip"
		destinationDirectory = file('build/dist')
		from file('build/dist/edc')
		into 'edc'
	}
	
	dockerComposeUp {
		dependsOn assembleDist
		dependsOn ':edc-backend:docker'
		dependsOn ':edc-frontend:docker'
	}
}

apply plugin: 'uk.me.eddies.gradleplugins.github-release'

githubRelease {
	owner = 'StevenEddies'
	repo = 'edc'
	token = project.findProperty('uk.me.eddies.github.token') ?: ''
	tagName = "v${version}"
	name = "Version ${version}"
	prerelease = version =~ /dev/
	draft = true
	assets = [ "edc-deploy/build/dist/edc-${project.version}.zip" ]
}

tasks.named('githubRelease') {
	dependsOn ':edc-deploy:packageDist'
}

tasks.register('release') {
	group = 'dist'
	description = 'Makes a full release via Docker Hub and Github.'
	dependsOn ':edc-backend:dockerPush'
	dependsOn ':edc-frontend:dockerPush'
	dependsOn ':edc-config-util:dockerPush'
	dependsOn ':githubRelease'
}
